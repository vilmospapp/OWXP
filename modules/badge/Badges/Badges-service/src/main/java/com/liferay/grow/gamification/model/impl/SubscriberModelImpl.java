/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.grow.gamification.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.grow.gamification.model.Subscriber;
import com.liferay.grow.gamification.model.SubscriberModel;
import com.liferay.grow.gamification.model.SubscriberSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Subscriber service. Represents a row in the &quot;gamification_Subscriber&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SubscriberModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SubscriberImpl}.
 * </p>
 *
 * @author Vilmos Papp
 * @see SubscriberImpl
 * @see Subscriber
 * @see SubscriberModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SubscriberModelImpl extends BaseModelImpl<Subscriber>
	implements SubscriberModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a subscriber model instance should use the {@link Subscriber} interface instead.
	 */
	public static final String TABLE_NAME = "gamification_Subscriber";
	public static final Object[][] TABLE_COLUMNS = {
			{ "subscriberId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "subscriberUserId", Types.BIGINT },
			{ "badgeType", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("subscriberId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("subscriberUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("badgeType", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table gamification_Subscriber (subscriberId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,subscriberUserId LONG,badgeType LONG)";
	public static final String TABLE_SQL_DROP = "drop table gamification_Subscriber";
	public static final String ORDER_BY_JPQL = " ORDER BY subscriber.subscriberId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY gamification_Subscriber.subscriberId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.grow.gamification.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.grow.gamification.model.Subscriber"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.grow.gamification.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.grow.gamification.model.Subscriber"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.grow.gamification.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.grow.gamification.model.Subscriber"),
			true);
	public static final long SUBSCRIBERUSERID_COLUMN_BITMASK = 1L;
	public static final long SUBSCRIBERID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Subscriber toModel(SubscriberSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Subscriber model = new SubscriberImpl();

		model.setSubscriberId(soapModel.getSubscriberId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setSubscriberUserId(soapModel.getSubscriberUserId());
		model.setBadgeType(soapModel.getBadgeType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Subscriber> toModels(SubscriberSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Subscriber> models = new ArrayList<Subscriber>(soapModels.length);

		for (SubscriberSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.grow.gamification.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.grow.gamification.model.Subscriber"));

	public SubscriberModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _subscriberId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSubscriberId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _subscriberId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Subscriber.class;
	}

	@Override
	public String getModelClassName() {
		return Subscriber.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Subscriber, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Subscriber, Object>> entry : attributeGetterFunctions.entrySet()) {
			String attributeName = entry.getKey();
			Function<Subscriber, Object> attributeGetterFunction = entry.getValue();

			attributes.put(attributeName,
				attributeGetterFunction.apply((Subscriber)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Subscriber, Object>> attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Subscriber, Object> attributeSetterBiConsumer = attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Subscriber)this,
					entry.getValue());
			}
		}
	}

	public Map<String, Function<Subscriber, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Subscriber, Object>> getAttributeSetterBiConsumers() {
		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Subscriber, Object>> _attributeGetterFunctions;
	private static final Map<String, BiConsumer<Subscriber, Object>> _attributeSetterBiConsumers;

	static {
		Map<String, Function<Subscriber, Object>> attributeGetterFunctions = new LinkedHashMap<String, Function<Subscriber, Object>>();
		Map<String, BiConsumer<Subscriber, ?>> attributeSetterBiConsumers = new LinkedHashMap<String, BiConsumer<Subscriber, ?>>();


		attributeGetterFunctions.put(
			"subscriberId",
			new Function<Subscriber, Object>() {

				@Override
				public Object apply(Subscriber subscriber) {
					return subscriber.getSubscriberId();
				}

			});
		attributeSetterBiConsumers.put(
			"subscriberId",
			new BiConsumer<Subscriber, Object>() {

				@Override
				public void accept(Subscriber subscriber, Object subscriberId) {
					subscriber.setSubscriberId((Long)subscriberId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Subscriber, Object>() {

				@Override
				public Object apply(Subscriber subscriber) {
					return subscriber.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Subscriber, Object>() {

				@Override
				public void accept(Subscriber subscriber, Object groupId) {
					subscriber.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Subscriber, Object>() {

				@Override
				public Object apply(Subscriber subscriber) {
					return subscriber.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Subscriber, Object>() {

				@Override
				public void accept(Subscriber subscriber, Object companyId) {
					subscriber.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<Subscriber, Object>() {

				@Override
				public Object apply(Subscriber subscriber) {
					return subscriber.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<Subscriber, Object>() {

				@Override
				public void accept(Subscriber subscriber, Object userId) {
					subscriber.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<Subscriber, Object>() {

				@Override
				public Object apply(Subscriber subscriber) {
					return subscriber.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<Subscriber, Object>() {

				@Override
				public void accept(Subscriber subscriber, Object userName) {
					subscriber.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Subscriber, Object>() {

				@Override
				public Object apply(Subscriber subscriber) {
					return subscriber.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Subscriber, Object>() {

				@Override
				public void accept(Subscriber subscriber, Object createDate) {
					subscriber.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Subscriber, Object>() {

				@Override
				public Object apply(Subscriber subscriber) {
					return subscriber.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Subscriber, Object>() {

				@Override
				public void accept(Subscriber subscriber, Object modifiedDate) {
					subscriber.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"subscriberUserId",
			new Function<Subscriber, Object>() {

				@Override
				public Object apply(Subscriber subscriber) {
					return subscriber.getSubscriberUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"subscriberUserId",
			new BiConsumer<Subscriber, Object>() {

				@Override
				public void accept(Subscriber subscriber, Object subscriberUserId) {
					subscriber.setSubscriberUserId((Long)subscriberUserId);
				}

			});
		attributeGetterFunctions.put(
			"badgeType",
			new Function<Subscriber, Object>() {

				@Override
				public Object apply(Subscriber subscriber) {
					return subscriber.getBadgeType();
				}

			});
		attributeSetterBiConsumers.put(
			"badgeType",
			new BiConsumer<Subscriber, Object>() {

				@Override
				public void accept(Subscriber subscriber, Object badgeType) {
					subscriber.setBadgeType((Long)badgeType);
				}

			});


		_attributeGetterFunctions = Collections.unmodifiableMap(attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap((Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getSubscriberId() {
		return _subscriberId;
	}

	@Override
	public void setSubscriberId(long subscriberId) {
		_subscriberId = subscriberId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getSubscriberUserId() {
		return _subscriberUserId;
	}

	@Override
	public void setSubscriberUserId(long subscriberUserId) {
		_columnBitmask |= SUBSCRIBERUSERID_COLUMN_BITMASK;

		if (!_setOriginalSubscriberUserId) {
			_setOriginalSubscriberUserId = true;

			_originalSubscriberUserId = _subscriberUserId;
		}

		_subscriberUserId = subscriberUserId;
	}

	@Override
	public String getSubscriberUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getSubscriberUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setSubscriberUserUuid(String subscriberUserUuid) {
	}

	public long getOriginalSubscriberUserId() {
		return _originalSubscriberUserId;
	}

	@JSON
	@Override
	public long getBadgeType() {
		return _badgeType;
	}

	@Override
	public void setBadgeType(long badgeType) {
		_badgeType = badgeType;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Subscriber.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Subscriber toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Subscriber)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SubscriberImpl subscriberImpl = new SubscriberImpl();

		subscriberImpl.setSubscriberId(getSubscriberId());
		subscriberImpl.setGroupId(getGroupId());
		subscriberImpl.setCompanyId(getCompanyId());
		subscriberImpl.setUserId(getUserId());
		subscriberImpl.setUserName(getUserName());
		subscriberImpl.setCreateDate(getCreateDate());
		subscriberImpl.setModifiedDate(getModifiedDate());
		subscriberImpl.setSubscriberUserId(getSubscriberUserId());
		subscriberImpl.setBadgeType(getBadgeType());

		subscriberImpl.resetOriginalValues();

		return subscriberImpl;
	}

	@Override
	public int compareTo(Subscriber subscriber) {
		long primaryKey = subscriber.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Subscriber)) {
			return false;
		}

		Subscriber subscriber = (Subscriber)obj;

		long primaryKey = subscriber.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SubscriberModelImpl subscriberModelImpl = this;

		subscriberModelImpl._setModifiedDate = false;

		subscriberModelImpl._originalSubscriberUserId = subscriberModelImpl._subscriberUserId;

		subscriberModelImpl._setOriginalSubscriberUserId = false;

		subscriberModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Subscriber> toCacheModel() {
		SubscriberCacheModel subscriberCacheModel = new SubscriberCacheModel();

		subscriberCacheModel.subscriberId = getSubscriberId();

		subscriberCacheModel.groupId = getGroupId();

		subscriberCacheModel.companyId = getCompanyId();

		subscriberCacheModel.userId = getUserId();

		subscriberCacheModel.userName = getUserName();

		String userName = subscriberCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			subscriberCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			subscriberCacheModel.createDate = createDate.getTime();
		}
		else {
			subscriberCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			subscriberCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			subscriberCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		subscriberCacheModel.subscriberUserId = getSubscriberUserId();

		subscriberCacheModel.badgeType = getBadgeType();

		return subscriberCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Subscriber, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler((4 * attributeGetterFunctions.size()) +
				2);

		sb.append("{");

		for (Map.Entry<String, Function<Subscriber, Object>> entry : attributeGetterFunctions.entrySet()) {
			String attributeName = entry.getKey();
			Function<Subscriber, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Subscriber)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Subscriber, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler((5 * attributeGetterFunctions.size()) +
				4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Subscriber, Object>> entry : attributeGetterFunctions.entrySet()) {
			String attributeName = entry.getKey();
			Function<Subscriber, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Subscriber)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Subscriber.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Subscriber.class, ModelWrapper.class
		};
	private long _subscriberId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _subscriberUserId;
	private long _originalSubscriberUserId;
	private boolean _setOriginalSubscriberUserId;
	private long _badgeType;
	private long _columnBitmask;
	private Subscriber _escapedModel;
}