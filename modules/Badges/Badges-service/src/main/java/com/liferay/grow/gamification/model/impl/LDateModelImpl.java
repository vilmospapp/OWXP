/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.grow.gamification.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.grow.gamification.model.LDate;
import com.liferay.grow.gamification.model.LDateModel;
import com.liferay.grow.gamification.model.LDateSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LDate service. Represents a row in the &quot;gamification_LDate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LDateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LDateImpl}.
 * </p>
 *
 * @author Vilmos Papp
 * @see LDateImpl
 * @see LDate
 * @see LDateModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LDateModelImpl extends BaseModelImpl<LDate> implements LDateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a l date model instance should use the {@link LDate} interface instead.
	 */
	public static final String TABLE_NAME = "gamification_LDate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dateId", Types.BIGINT },
			{ "year", Types.INTEGER },
			{ "month", Types.INTEGER },
			{ "monthName", Types.VARCHAR },
			{ "day", Types.INTEGER },
			{ "dayOfYear", Types.INTEGER },
			{ "week", Types.INTEGER },
			{ "weekDay", Types.VARCHAR },
			{ "quarter", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("year", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("month", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("monthName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("day", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dayOfYear", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("week", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("weekDay", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quarter", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table gamification_LDate (dateId LONG not null primary key,year INTEGER,month INTEGER,monthName VARCHAR(75) null,day INTEGER,dayOfYear INTEGER,week INTEGER,weekDay VARCHAR(75) null,quarter VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table gamification_LDate";
	public static final String ORDER_BY_JPQL = " ORDER BY lDate.dateId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY gamification_LDate.dateId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.grow.gamification.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.grow.gamification.model.LDate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.grow.gamification.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.grow.gamification.model.LDate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.grow.gamification.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.grow.gamification.model.LDate"),
			true);
	public static final long DAY_COLUMN_BITMASK = 1L;
	public static final long MONTH_COLUMN_BITMASK = 2L;
	public static final long YEAR_COLUMN_BITMASK = 4L;
	public static final long DATEID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LDate toModel(LDateSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LDate model = new LDateImpl();

		model.setDateId(soapModel.getDateId());
		model.setYear(soapModel.getYear());
		model.setMonth(soapModel.getMonth());
		model.setMonthName(soapModel.getMonthName());
		model.setDay(soapModel.getDay());
		model.setDayOfYear(soapModel.getDayOfYear());
		model.setWeek(soapModel.getWeek());
		model.setWeekDay(soapModel.getWeekDay());
		model.setQuarter(soapModel.getQuarter());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LDate> toModels(LDateSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LDate> models = new ArrayList<LDate>(soapModels.length);

		for (LDateSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.grow.gamification.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.grow.gamification.model.LDate"));

	public LDateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LDate.class;
	}

	@Override
	public String getModelClassName() {
		return LDate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dateId", getDateId());
		attributes.put("year", getYear());
		attributes.put("month", getMonth());
		attributes.put("monthName", getMonthName());
		attributes.put("day", getDay());
		attributes.put("dayOfYear", getDayOfYear());
		attributes.put("week", getWeek());
		attributes.put("weekDay", getWeekDay());
		attributes.put("quarter", getQuarter());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long dateId = (Long)attributes.get("dateId");

		if (dateId != null) {
			setDateId(dateId);
		}

		Integer year = (Integer)attributes.get("year");

		if (year != null) {
			setYear(year);
		}

		Integer month = (Integer)attributes.get("month");

		if (month != null) {
			setMonth(month);
		}

		String monthName = (String)attributes.get("monthName");

		if (monthName != null) {
			setMonthName(monthName);
		}

		Integer day = (Integer)attributes.get("day");

		if (day != null) {
			setDay(day);
		}

		Integer dayOfYear = (Integer)attributes.get("dayOfYear");

		if (dayOfYear != null) {
			setDayOfYear(dayOfYear);
		}

		Integer week = (Integer)attributes.get("week");

		if (week != null) {
			setWeek(week);
		}

		String weekDay = (String)attributes.get("weekDay");

		if (weekDay != null) {
			setWeekDay(weekDay);
		}

		String quarter = (String)attributes.get("quarter");

		if (quarter != null) {
			setQuarter(quarter);
		}
	}

	@JSON
	@Override
	public long getDateId() {
		return _dateId;
	}

	@Override
	public void setDateId(long dateId) {
		_dateId = dateId;
	}

	@JSON
	@Override
	public int getYear() {
		return _year;
	}

	@Override
	public void setYear(int year) {
		_columnBitmask |= YEAR_COLUMN_BITMASK;

		if (!_setOriginalYear) {
			_setOriginalYear = true;

			_originalYear = _year;
		}

		_year = year;
	}

	public int getOriginalYear() {
		return _originalYear;
	}

	@JSON
	@Override
	public int getMonth() {
		return _month;
	}

	@Override
	public void setMonth(int month) {
		_columnBitmask |= MONTH_COLUMN_BITMASK;

		if (!_setOriginalMonth) {
			_setOriginalMonth = true;

			_originalMonth = _month;
		}

		_month = month;
	}

	public int getOriginalMonth() {
		return _originalMonth;
	}

	@JSON
	@Override
	public String getMonthName() {
		if (_monthName == null) {
			return "";
		}
		else {
			return _monthName;
		}
	}

	@Override
	public void setMonthName(String monthName) {
		_monthName = monthName;
	}

	@JSON
	@Override
	public int getDay() {
		return _day;
	}

	@Override
	public void setDay(int day) {
		_columnBitmask |= DAY_COLUMN_BITMASK;

		if (!_setOriginalDay) {
			_setOriginalDay = true;

			_originalDay = _day;
		}

		_day = day;
	}

	public int getOriginalDay() {
		return _originalDay;
	}

	@JSON
	@Override
	public int getDayOfYear() {
		return _dayOfYear;
	}

	@Override
	public void setDayOfYear(int dayOfYear) {
		_dayOfYear = dayOfYear;
	}

	@JSON
	@Override
	public int getWeek() {
		return _week;
	}

	@Override
	public void setWeek(int week) {
		_week = week;
	}

	@JSON
	@Override
	public String getWeekDay() {
		if (_weekDay == null) {
			return "";
		}
		else {
			return _weekDay;
		}
	}

	@Override
	public void setWeekDay(String weekDay) {
		_weekDay = weekDay;
	}

	@JSON
	@Override
	public String getQuarter() {
		if (_quarter == null) {
			return "";
		}
		else {
			return _quarter;
		}
	}

	@Override
	public void setQuarter(String quarter) {
		_quarter = quarter;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LDate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LDate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LDate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LDateImpl lDateImpl = new LDateImpl();

		lDateImpl.setDateId(getDateId());
		lDateImpl.setYear(getYear());
		lDateImpl.setMonth(getMonth());
		lDateImpl.setMonthName(getMonthName());
		lDateImpl.setDay(getDay());
		lDateImpl.setDayOfYear(getDayOfYear());
		lDateImpl.setWeek(getWeek());
		lDateImpl.setWeekDay(getWeekDay());
		lDateImpl.setQuarter(getQuarter());

		lDateImpl.resetOriginalValues();

		return lDateImpl;
	}

	@Override
	public int compareTo(LDate lDate) {
		long primaryKey = lDate.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LDate)) {
			return false;
		}

		LDate lDate = (LDate)obj;

		long primaryKey = lDate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LDateModelImpl lDateModelImpl = this;

		lDateModelImpl._originalYear = lDateModelImpl._year;

		lDateModelImpl._setOriginalYear = false;

		lDateModelImpl._originalMonth = lDateModelImpl._month;

		lDateModelImpl._setOriginalMonth = false;

		lDateModelImpl._originalDay = lDateModelImpl._day;

		lDateModelImpl._setOriginalDay = false;

		lDateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LDate> toCacheModel() {
		LDateCacheModel lDateCacheModel = new LDateCacheModel();

		lDateCacheModel.dateId = getDateId();

		lDateCacheModel.year = getYear();

		lDateCacheModel.month = getMonth();

		lDateCacheModel.monthName = getMonthName();

		String monthName = lDateCacheModel.monthName;

		if ((monthName != null) && (monthName.length() == 0)) {
			lDateCacheModel.monthName = null;
		}

		lDateCacheModel.day = getDay();

		lDateCacheModel.dayOfYear = getDayOfYear();

		lDateCacheModel.week = getWeek();

		lDateCacheModel.weekDay = getWeekDay();

		String weekDay = lDateCacheModel.weekDay;

		if ((weekDay != null) && (weekDay.length() == 0)) {
			lDateCacheModel.weekDay = null;
		}

		lDateCacheModel.quarter = getQuarter();

		String quarter = lDateCacheModel.quarter;

		if ((quarter != null) && (quarter.length() == 0)) {
			lDateCacheModel.quarter = null;
		}

		return lDateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{dateId=");
		sb.append(getDateId());
		sb.append(", year=");
		sb.append(getYear());
		sb.append(", month=");
		sb.append(getMonth());
		sb.append(", monthName=");
		sb.append(getMonthName());
		sb.append(", day=");
		sb.append(getDay());
		sb.append(", dayOfYear=");
		sb.append(getDayOfYear());
		sb.append(", week=");
		sb.append(getWeek());
		sb.append(", weekDay=");
		sb.append(getWeekDay());
		sb.append(", quarter=");
		sb.append(getQuarter());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.liferay.grow.gamification.model.LDate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dateId</column-name><column-value><![CDATA[");
		sb.append(getDateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>year</column-name><column-value><![CDATA[");
		sb.append(getYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>month</column-name><column-value><![CDATA[");
		sb.append(getMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>monthName</column-name><column-value><![CDATA[");
		sb.append(getMonthName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>day</column-name><column-value><![CDATA[");
		sb.append(getDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dayOfYear</column-name><column-value><![CDATA[");
		sb.append(getDayOfYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>week</column-name><column-value><![CDATA[");
		sb.append(getWeek());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weekDay</column-name><column-value><![CDATA[");
		sb.append(getWeekDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quarter</column-name><column-value><![CDATA[");
		sb.append(getQuarter());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LDate.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LDate.class, ModelWrapper.class
		};
	private long _dateId;
	private int _year;
	private int _originalYear;
	private boolean _setOriginalYear;
	private int _month;
	private int _originalMonth;
	private boolean _setOriginalMonth;
	private String _monthName;
	private int _day;
	private int _originalDay;
	private boolean _setOriginalDay;
	private int _dayOfYear;
	private int _week;
	private String _weekDay;
	private String _quarter;
	private long _columnBitmask;
	private LDate _escapedModel;
}